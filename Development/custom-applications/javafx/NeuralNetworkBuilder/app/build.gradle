/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4/userguide/building_java_projects.html
 */

plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.12'      
    // Plugin for runtime/runtimeZip tasks.
    id 'org.beryx.runtime' version '1.12.7'    
}

repositories {
    jcenter()
    mavenCentral()
}

def libFolder = 'libs'
def includePattern = '*.jar'


dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'
    
}

applicationDefaultJvmArgs = [
        "--add-exports=javafx.graphics/com.sun.javafx.css=ALL-UNNAMED",          
        "--add-exports=javafx.graphics/com.sun.javafx.scene=ALL-UNNAMED", 
        "--add-exports=javafx.graphics/com.sun.javafx.scene.traversal=ALL-UNNAMED",
        "--add-opens", "javafx.graphics/javafx.css=ALL-UNNAMED",
        "--add-opens", "java.base/java.lang=ALL-UNNAMED"
]

sourceCompatibility = '14'
targetCompatibility = '14' 

javafx {    
    version = "19-ea+7"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.web', 'javafx.graphics' ]
}

project.ext.buildDate = new Date()
project.version = '0.9.12-cloud'

application {
    // Define the main class for the application.
    mainClass = 'com.bana274.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}


dependencies {
   implementation 'org.kordamp.ikonli:ikonli-javafx:12.3.1'
   implementation 'org.kordamp.ikonli:ikonli-fontawesome-pack:12.3.1'
   implementation 'org.kordamp.ikonli:ikonli-fontawesome5-pack:12.3.1'
   implementation 'org.kordamp.ikonli:ikonli-weathericons-pack:12.3.1'     
   // FXControls
   implementation group: 'org.controlsfx', name: 'controlsfx', version: '11.1.1'
   implementation group: 'com.dlsc.gemsfx', name: 'gemsfx', version: '1.45.2'   
   implementation group: 'org.deeplearning4j', name: 'deeplearning4j-core', version: '1.0.0-M2'
   implementation group: 'org.deeplearning4j', name: 'deeplearning4j-nn', version: '1.0.0-M2'   
   implementation group: 'org.deeplearning4j', name: 'deeplearning4j-ui', version: '1.0.0-M2'
   implementation group: 'org.nd4j', name: 'nd4j-native-platform', version: '1.0.0-M2'
   implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'   
   // Jackson
   implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.13.3'

   // Load jars in the lib directory.
   implementation fileTree(dir: libFolder, include: includePattern)   
}

//
// Fat-Jar task
//
// Note: When using the Gradle Shadow plugin, add the 'Multi-Release': 'true'
// to the manifest element.
jar {
    zip64 = true
    duplicatesStrategy = 'exclude'
    manifest {
        attributes 'Main-Class': 'com.octane.App', 'Multi-Release': 'true'
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

// Badass Runtime Plugin - runtime/runtimeZip tasks
runtime {        
    modules = [
        'java.se',
        'jdk.accessibility',
        'jdk.charsets',
        'jdk.crypto.cryptoki',
        'jdk.crypto.ec',     
        'jdk.httpserver',
        'jdk.jsobject',
        'jdk.localedata',
        'jdk.net',
        'jdk.security.auth',
        'jdk.security.jgss',
        'jdk.unsupported',
        'jdk.unsupported.desktop',
        'jdk.xml.dom'
    ]   
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']   
    imageZip = file("$buildDir/high-octane-"+getTimestamp()+".zip")
    jpackage {
        imageName = "high-octane"
    }
}

def getTimestamp() {
  // year month date _ hour minute second _ millisecond
  return new Date().format('yyyyMMdd_HHmmss_SSS')
}

